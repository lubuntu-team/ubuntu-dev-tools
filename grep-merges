#! /usr/bin/python3
#
# grep-merges - search for pending merges from Debian
#
# Copyright (C) 2010 Canonical Ltd.
# Authors:
#  - Colin Watson <cjwatson@ubuntu.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=invalid-name
# pylint: enable=invalid-name

import argparse
import json
import sys

from httplib2 import Http, HttpLib2Error

import ubuntutools.misc
from ubuntutools import getLogger

Logger = getLogger()


def main():
    parser = argparse.ArgumentParser(
        usage="%(prog)s [options] [string]",
        description="List pending merges from Debian matching string",
    )
    parser.add_argument("string", nargs="?", help=argparse.SUPPRESS)
    args = parser.parse_args()

    ubuntutools.misc.require_utf8()

    for component in (
        "main",
        "main-manual",
        "restricted",
        "restricted-manual",
        "universe",
        "universe-manual",
        "multiverse",
        "multiverse-manual",
    ):
        url = f"https://merges.ubuntu.com/{component}.json"
        try:
            headers, page = Http().request(url)
        except HttpLib2Error as e:
            Logger.exception(e)
            sys.exit(1)
        if headers.status != 200:
            Logger.error("%s: %s %s", url, headers.status, headers.reason)
            sys.exit(1)

        for merge in json.loads(page):
            package = merge["source_package"]
            author, uploader = "", ""
            if merge.get("user"):
                author = merge["user"]
            if merge.get("uploader"):
                uploader = f"({merge['uploader']})"
            teams = merge.get("teams", [])

            pretty_uploader = f"{author} {uploader}"
            if (
                args.string is None
                or args.string in package
                or args.string in author
                or args.string in uploader
                or args.string in teams
            ):
                Logger.info("%s\t%s", package, pretty_uploader)


if __name__ == "__main__":
    main()
