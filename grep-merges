#! /usr/bin/python3
#
# grep-merges - search for pending merges from Debian
#
# Copyright (C) 2010 Canonical Ltd.
# Authors:
#  - Colin Watson <cjwatson@ubuntu.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import optparse
import sys
import json

from httplib2 import Http, HttpLib2Error

import ubuntutools.misc

from ubuntutools import getLogger
Logger = getLogger(__name__)


def main():
    parser = optparse.OptionParser(
        usage='%prog [options] [string]',
        description='List pending merges from Debian matching string')
    args = parser.parse_args()[1]

    if len(args) > 1:
        parser.error('Too many arguments')
    elif len(args) == 1:
        match = args[0]
    else:
        match = None

    ubuntutools.misc.require_utf8()

    for component in ('main', 'main-manual',
                      'restricted', 'restricted-manual',
                      'universe', 'universe-manual',
                      'multiverse', 'multiverse-manual'):

        url = 'https://merges.ubuntu.com/%s.json' % component
        try:
            headers, page = Http().request(url)
        except HttpLib2Error as e:
            Logger.exception(e)
            sys.exit(1)
        if headers.status != 200:
            Logger.error("%s: %s %s" % (url, headers.status,
                                        headers.reason))
            sys.exit(1)

        for merge in json.loads(page):
            package = merge['source_package']
            author, uploader = '', ''
            if merge.get('user'):
                author = merge['user']
            if merge.get('uploader'):
                uploader = '(%s)' % merge['uploader']
            teams = merge.get('teams', [])

            pretty_uploader = '{} {}'.format(author, uploader)
            if (match is None or match in package or match in author
               or match in uploader or match in teams):
                Logger.info('%s\t%s' % (package, pretty_uploader))


if __name__ == '__main__':
    main()
