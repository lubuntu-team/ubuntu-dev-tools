#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# submittodebian - tool to submit patches to Debian's BTS
# Copyright (C) 2007, 2009 Canonical Ltd.
# Author: Soren Hansen <soren@ubuntu.com>,
#         Steve Langasek <slangasek@canonical.com>
#
# ##################################################################
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# See file /usr/share/common-licenses/GPL for more details.
#
# ##################################################################

import re, os, sys
from tempfile import mkstemp

from ubuntutools.distro_info import UbuntuDistroInfo

try:
    from debian.changelog import Changelog
except ImportError:
    print ('This utility requires modules from the «python-debian» package, '
           'which isn\'t currently installed.')
    sys.exit(1)

if not os.path.exists('/usr/bin/reportbug'):
    print ('This utility requires the «reportbug» package, which isn\'t '
           'currently installed.')
    sys.exit(1)

def get_most_recent_debian_version(changelog):
    for version in changelog.get_versions():
        if not re.search('(ubuntu|build)', version.full_version):
            return version.full_version

def get_bug_body(changelog):
    msg = """In Ubuntu, the attached patch was applied to achieve the following:

## ---------------- REPLACE THIS WITH ACTUAL INFORMATION ---------------------
## Please add all necessary information about why the change needed to go in
## Ubuntu, quote policy, spec or any other background material and why it can
## and should be used in Debian too.  If the patch is composed of multiple
## independent pieces, please send them as separate bug reports.
## ---------------- REPLACE THIS WITH ACTUAL INFORMATION ---------------------

%s

Thanks for considering the patch.
""" % ("\n".join([a for a in changelog._blocks[0].changes()]))
    return msg

def gen_debdiff(changelog):
    pkg = changelog.package

    oldver = changelog._blocks[1].version
    newver = changelog._blocks[0].version

    (fd, debdiff) = mkstemp()
    os.close(fd)

    if os.system('bzr diff -r tag:%s > /dev/null 2>&1' % oldver) == 256:
        print "Extracting bzr diff between %s and %s" % (oldver, newver)
        cmd = 'bzr diff -r tag:%s | filterdiff -x "*changelog*" > %s' % \
              (oldver, debdiff)
        run_cmd(cmd)
    else:
        if oldver.epoch is not None:
            oldver = str(oldver)[str(oldver).index(":")+1:]
        if newver.epoch is not None:
            newver = str(newver)[str(newver).index(":")+1:]

        olddsc = '../%s_%s.dsc' % (pkg, oldver)
        newdsc = '../%s_%s.dsc' % (pkg, newver)

        check_file(olddsc)
        check_file(newdsc)

        print "Generating debdiff between %s and %s" % (oldver, newver)
        cmd = 'debdiff %s %s | filterdiff -x "*changelog*" > %s' % \
              (olddsc, newdsc, debdiff)
        run_cmd(cmd)

    return debdiff

def check_file(fname, critical = True):
    if os.path.exists(fname):
        return fname
    else:
        if not critical:
            return False
        print "Couldn't find «%s».\n" % fname
        sys.exit(1)

def edit_debdiff(debdiff):
    cmd = 'sensible-editor %s' % (debdiff)
    run_cmd(cmd)

def submit_bugreport(body, debdiff, deb_version, changelog):
    cmd = ('reportbug -P "User: ubuntu-devel@lists.ubuntu.com" '
           '-P "Usertags: origin-ubuntu %s ubuntu-patch" -T patch -A %s '
           '-B debian -i %s -V %s %s') % \
           (UbuntuDistroInfo().devel(), debdiff, body, deb_version,
            changelog.package)
    run_cmd(cmd)

def run_cmd(cmd):
    if os.getenv('DEBUG'):
        print "%s\n" % cmd
    os.system(cmd)

def main():
    changelog_file = (check_file('debian/changelog', critical = False) or
                      check_file('../debian/changelog'))
    changelog = Changelog(file(changelog_file).read())

    deb_version = get_most_recent_debian_version(changelog)
    bug_body = get_bug_body(changelog)

    fd, body = mkstemp()
    fp = os.fdopen(fd, 'w')
    fp.write(bug_body)
    fp.close()

    debdiff = gen_debdiff(changelog)
    edit_debdiff(debdiff)
    submit_bugreport(body, debdiff, deb_version, changelog)
    os.unlink(body)
    os.unlink(debdiff)

if __name__ == '__main__':
    main()
